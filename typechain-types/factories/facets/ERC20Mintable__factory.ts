/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ERC20Mintable,
  ERC20MintableInterface,
} from "../../facets/ERC20Mintable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610450806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806340c10f1914610030575b600080fd5b61004a6004803603810190610045919061029a565b610060565b60405161005791906102f5565b60405180910390f35b600061006c8383610073565b5092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036100e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100da9061036d565b60405180910390fd5b816100ec6101d4565b60030160008282546100fe91906103bc565b925050819055508161010e6101d4565b60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461015d91906103bc565b925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516101c291906103ff565b60405180910390a36001905092915050565b6000807f3d9dd05acf4eeff6ea52c75c57684253f050e85b2811ab1bd50aab995424edbc90508091505090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061023182610206565b9050919050565b61024181610226565b811461024c57600080fd5b50565b60008135905061025e81610238565b92915050565b6000819050919050565b61027781610264565b811461028257600080fd5b50565b6000813590506102948161026e565b92915050565b600080604083850312156102b1576102b0610201565b5b60006102bf8582860161024f565b92505060206102d085828601610285565b9150509250929050565b60008115159050919050565b6102ef816102da565b82525050565b600060208201905061030a60008301846102e6565b92915050565b600082825260208201905092915050565b7f45524332303a2063616e2774206d696e7420746f203020616464726573730000600082015250565b6000610357601e83610310565b915061036282610321565b602082019050919050565b600060208201905081810360008301526103868161034a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006103c782610264565b91506103d283610264565b92508282019050808211156103ea576103e961038d565b5b92915050565b6103f981610264565b82525050565b600060208201905061041460008301846103f0565b9291505056fea26469706673582212200506c211457689214a2ad345ae54e09f9367b07b44145034585ae1bb986be1cd64736f6c63430008100033";

type ERC20MintableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20MintableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Mintable__factory extends ContractFactory {
  constructor(...args: ERC20MintableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Mintable> {
    return super.deploy(overrides || {}) as Promise<ERC20Mintable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Mintable {
    return super.attach(address) as ERC20Mintable;
  }
  override connect(signer: Signer): ERC20Mintable__factory {
    return super.connect(signer) as ERC20Mintable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20MintableInterface {
    return new utils.Interface(_abi) as ERC20MintableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Mintable {
    return new Contract(address, _abi, signerOrProvider) as ERC20Mintable;
  }
}
