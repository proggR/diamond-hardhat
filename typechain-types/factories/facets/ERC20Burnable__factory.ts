/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ERC20Burnable,
  ERC20BurnableInterface,
} from "../../facets/ERC20Burnable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount_",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104f7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806342966c6814610030575b600080fd5b61004a600480360381019061004591906102e8565b610060565b6040516100579190610330565b60405180910390f35b600061006c3383610072565b50919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036100e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d9906103a8565b60405180910390fd5b6100ec83836101dd565b816100f561022a565b60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461014491906103f7565b925050819055508161015461022a565b600301600082825461016691906103f7565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516101cb919061043a565b60405180910390a36001905092915050565b6101e78282610257565b610226576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021d906104a1565b60405180910390fd5b5050565b6000807f3d9dd05acf4eeff6ea52c75c57684253f050e85b2811ab1bd50aab995424edbc90508091505090565b60008161026261022a565b60000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015905092915050565b600080fd5b6000819050919050565b6102c5816102b2565b81146102d057600080fd5b50565b6000813590506102e2816102bc565b92915050565b6000602082840312156102fe576102fd6102ad565b5b600061030c848285016102d3565b91505092915050565b60008115159050919050565b61032a81610315565b82525050565b60006020820190506103456000830184610321565b92915050565b600082825260208201905092915050565b7f45524332303a2063616e2774206275726e2066726f6d20302061646472657373600082015250565b600061039260208361034b565b915061039d8261035c565b602082019050919050565b600060208201905081810360008301526103c181610385565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610402826102b2565b915061040d836102b2565b9250828203905081811115610425576104246103c8565b5b92915050565b610434816102b2565b82525050565b600060208201905061044f600083018461042b565b92915050565b7f45524332303a20496e73756666696369656e742046756e647300000000000000600082015250565b600061048b60198361034b565b915061049682610455565b602082019050919050565b600060208201905081810360008301526104ba8161047e565b905091905056fea26469706673582212202ae17df2a9b433d6ee4a885b50bb64c6794ffdf0df6662cf80da318e00cfa64264736f6c63430008100033";

type ERC20BurnableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20BurnableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Burnable__factory extends ContractFactory {
  constructor(...args: ERC20BurnableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Burnable> {
    return super.deploy(overrides || {}) as Promise<ERC20Burnable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Burnable {
    return super.attach(address) as ERC20Burnable;
  }
  override connect(signer: Signer): ERC20Burnable__factory {
    return super.connect(signer) as ERC20Burnable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20BurnableInterface {
    return new utils.Interface(_abi) as ERC20BurnableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Burnable {
    return new Contract(address, _abi, signerOrProvider) as ERC20Burnable;
  }
}
